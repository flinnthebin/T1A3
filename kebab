#!/usr/bin/python3

# kebab - remaps directories and files to use kebab-case naming convention. 
# the kebab-case format was selected as it is not commonly associated with programming languages, making it a convenient choice for organizing a linux filesystem
# the purpose of the script is to simplify and standardize navigation within the filesystem.
# feature 1 - create a backup of the original directory tree in case of user error
# feature 2 - print file information for the items that have been reorganized
# feature 3 - rename a directory tree to kebab case

# use case: standardization of repositories cloned from github to keep navigation across a system uniform.

import sys
import os
import subprocess
import shutil

def usage():
  if len(sys.argv) < 2:
    print("""kebab - a tool to remap directories and files to kebab case.
    usage: kebab <directory>""")
    sys.exit(1)

def create_backup(directory):
    backup_name = f"{directory}_backup.tar.gz"
    shutil.make_archive(backup_name[:-7], 'gztar', directory)
    return backup_name

def confirmation(argv1, argv2):
  confirm = input(f"Do you want to rename the following directory tree to kebab-case? [y/n]")
  if confirm.lower() == "y":
    backup_name = create_backup(argv1)
    print(f"Backup created: {backup_name}")
    try:
     rename_all(argv1) 
    except:
      print("Something went wrong while renaming the directory tree.")
  else:
    print("alright, alright, alright. be a lot cooler if you did.")

def analyze_file(file_path):
  file_type = subprocess.getoutput(f"file -b --mime-type {file_path}")
  word_count = subprocess.getoutput(f"wc -w {file_path}")
  return {"file_type": file_type, "word_count": word_count.strip().split()[0]}

def print_analysis_report():
  # collate file analysis, print dict to terminal
  return

def rename(current_name, new_name):
  try:
    os.rename(current_name, new_name)
  except PermissionError as e:
    print("Permission Error: ", e)  

def rename_all(directory, renamed={}):
  try:
    new_name = directory.strip().lower().replace(" ", "-").replace("_", "-")
    if directory not in renamed:
      rename(directory, new_name)
      renamed[directory] = new_name
    directory = new_name
  except PermissionError as e:
    print("Permission Error: ", e)
    return

if __name__ == "__main__":
  usage()
  confirmation(sys.argv[1])